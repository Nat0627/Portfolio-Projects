-- When building joins, you need to understand the tables that will be joined; how do the tables link, common fields/primary keys
-- Visualize sales data with the salesperson's name
-- We can see the SPID field; however, we cannot identify who the salesperson is; hence, our need to link the people table with the sales table
select * from sales;

-- start with select and enter from clause first, give table pulling from an alias; hence the 's', then identify the columns in select clause.
-- when identifying columns, use the alias to shorten; the start join, table joining on first and alias and then call the columns = to each other. 
-- now we can pull the column in from the table joined on, so the salesperson column can now be pulled.  

select s.SaleDate, s.Amount, p.salesperson, s.spid, p.spid
from sales s
join people p on p.spid = s.spid;

-- most common type of join in business is left join
-- left join pulls all data from the left table; regardless if it is in the right table or not. 
-- if there is a match in the right table, or second table, SQL will bring it over, or join it with the left table data.alter

-- we want to see the product names that we are selling in the shipment; we need to join the product table. 
-- identifies revenue generated by day for different products sold.  
-- data from right table that does not match with left primary key will show up null or blank.  

select s.SaleDate, s.Amount, pr.product
from sales s  
left join products pr on pr.pid = s.pid;

-- we can join multiple tables; next query will show two joins
-- Show product name and person name in one view
-- copied query from original left join and second left join 
-- there are some nulls in the team field because some people are not on a team
-- join is like one condition because ids should match across the table, but you can add other conditions.  
-- below query shows sales, people, and product table joined to show the saledate, amount, sales person column, product, and team.
-- query also shows only data where the amount was greater than 5000
-- query to identify where amount was greater than 5000 for a specific team

select s.SaleDate, s.Amount, p.salesperson, pr.product, p.team
from sales s
join people p on p.spid = s.spid
join products pr on pr.pid = s.pid
where s.amount > 5000
and p.team = 'Delish'; 

-- Extract people who do not belong to a team who had sale amount greater than 5000

select s.SaleDate, s.Amount, p.salesperson, pr.product, p.team
from sales s
join people p on p.spid = s.spid
join products pr on pr.pid = s.pid
where s.amount > 5000
and p.team = ''; 

-- Extract same data as above, but pull data where shipements went to India or New Zealand; hence, copy and modify query.
-- You must know your data to understand which columns are present and how to extract the data needed.  
-- Spend time understand the data; what tables are present, what columns are present, how the tables/columns are linked up -- KNOW DATASET
-- Geo column for good practice should be shown on the screen to ensure you have pulled data from India and New Zealand; it doesn't have to be present, but it is good practice. 
-- ordering by saledata allows us to see shipments in chronological order.

select s.SaleDate, s.Amount, p.salesperson, pr.product, p.team, g.geo
from sales s
join people p on p.spid = s.spid
join products pr on pr.pid = s.pid
join geo g on g.geoid = s.GeoID
where s.amount > 5000
and p.team = ''
and geo IN ('India','New Zealand')
order by saledate; 


